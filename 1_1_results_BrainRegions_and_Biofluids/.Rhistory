qc_olink <- read.csv(qc_olink_path, sep = ";")
## metadata
exp_cond <- "Apos_T" ## experimental groups
metadata <- read.csv(metadata_path)
row.names(metadata) <- metadata$Olink_ID
metadata$condition1 <- as.character(metadata[,exp_cond])
## expression data
ex <- read.csv(ex_path, row.names = 1)
ex <- t(ex)
## annotation data
ann <- unique(qc_olink[,c(5:3)])
ann <- sapply(ann, make.names)
row.names(ann) <- ann[,1]
ann <- data.frame(ann)
colnames(ann)[1] <- "ID"
## sample filters
sample_filter <- !is.na(metadata$Apos_T) ## add sample filter
metadata <- metadata[!is.na(metadata$Apos_T),]
ex <- ex[,metadata$Olink_ID]
## clean
lskeep <- c("lskeep","wd_path","metadata_path","exp_cond","metadata","ex","ann","qc_olink")
#############################
# Package Install/Load
#############################
library(Biobase)
library(limma)
library(reshape2)
library(kableExtra)
library(ggplot2)
library(plotly)
## format data
exploration_data_pre_qc <- melt(t(ex))
colnames(exploration_data_pre_qc)[1:2] <- c("Olink_ID","symbol")
colnames(exploration_data_pre_qc)[3] <- "NPX"
exploration_data_pre_qc$Olink_ID <- as.character(exploration_data_pre_qc$Olink_ID)
exploration_data_pre_qc$symbol <- as.character(exploration_data_pre_qc$symbol)
exploration_data_pre_qc$"pp_phase" <- "pre"
## add group
exploration_data_pre_qc <- merge(exploration_data_pre_qc,metadata[,c("Olink_ID","condition1")], no.dups = FALSE)
exploration_data_pre_qc$condition1 <- as.factor(exploration_data_pre_qc$condition1)
## clean
lskeep <- unique(c(lskeep, "exploration_data_pre_qc"))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
ggplot_data <- exploration_data_pre_qc
## plot
ggplotly(
ggplot(data=ggplot_data,
mapping = aes(x = Olink_ID, y = NPX, fill=condition1)) +
geom_boxplot() +
ggtitle("Distribution of protein expression") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank())
)
## by group
ggplotly(
ggplot(data = ggplot_data, mapping = aes(x=NPX, colour=condition1)) +
geom_density() +
ggtitle("Expression density by Group") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90),
legend.position = "none")
)
## by sample
ggplotly(
ggplot(data = ggplot_data, mapping = aes(x=NPX, colour=Olink_ID)) +
geom_density() +
ggtitle("Expression density by sample") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90),
legend.position = "none")
)
ex<-ex[,colnames(ex)!="T077"]
metadata<-subset(metadata, Olink_ID!="T077")
## function to evaluate the proportion of NPX < LOD for each protein
eval_lod <- function(assay_split) {
ev <- assay_split$NPX < assay_split$LOD # eval if NPX < LOD for each sample
sum(ev)/length(ev)
}
## apply LOD evaluation
cond_var <- as.character(unique(metadata$condition1))
names(cond_var) <- paste("Group",cond_var,sep="_")
lod_prop_df <- sapply(cond_var, function(cond) {
group_samps <- subset(x = metadata, subset = condition1 == cond)$Olink_ID
group_exprs <- qc_olink[qc_olink$SampleID%in%group_samps,
c("SampleID","Assay","LOD","NPX")]
group_lodsplit <- split(x = group_exprs, f = group_exprs$Assay)
sapply(group_lodsplit, eval_lod)
})
lod_prop_df <- data.frame("Symbol" = row.names(lod_prop_df), lod_prop_df, row.names = NULL)
kable(x = lod_prop_df, format = "html",
caption = "Proportion of proteins with NPX < LOD for each group") %>%
kable_styling(latex_options = c("scale_down", "hold_position")) %>%
kable_classic()
apply(lod_prop_df[,-1],2,function(c) sum(c>0.5))
lod_prop_count <- apply(lod_prop_df[,-1],2,function(c) c>0.5)
lod_prop_count <- apply(lod_prop_count, 1, function(r) all(r))
names(lod_prop_count) <- lod_prop_df$Symbol
out_symbs <- names(lod_prop_count)[lod_prop_count]
# lod_by_samp <- lapply(cond_var, function(cond) {
#      group_samps <- subset(x = metadata, subset = condition1 == cond)$Olink_ID
#      group_exprs <- qc_olink[qc_olink$SampleID%in%group_samps,
#                              c("SampleID","Assay","LOD","NPX")]
#      group_exprs <- group_exprs[group_exprs$Assay%in%out_symbs,]
#      group_exprs[group_exprs$NPX<group_exprs$LOD,]
# })
# lod_by_samp <- do.call("rbind",lod_by_samp)
# for(i in seq(nrow(lod_by_samp))) {
#      smp <- lod_by_samp[i,"SampleID"]
#      symb <- lod_by_samp[i,"Assay"]
#      ex[symb,smp] <- lod_by_samp[i,"LOD"]/(sqrt(2))
# }
lod_by_samp <- qc_olink[qc_olink$SampleID%in%colnames(ex),
c("SampleID","Assay","LOD","NPX")]
lod_by_samp <- lod_by_samp[lod_by_samp$NPX<lod_by_samp$LOD,]
for(i in seq(nrow(lod_by_samp))) {
smp <- lod_by_samp[i,"SampleID"]
symb <- make.names(lod_by_samp[i,"Assay"])
ex[symb,smp] <- lod_by_samp[i,"LOD"]/(sqrt(2))
}
## clean
lskeep <- unique(c(lskeep,"out_symbs"))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
## format data
exploration_data_pos_qc <- melt(t(ex))
colnames(exploration_data_pos_qc)[1:2] <- c("Olink_ID","symbol")
colnames(exploration_data_pos_qc)[3] <- "NPX"
exploration_data_pos_qc$Olink_ID <- as.character(exploration_data_pos_qc$Olink_ID)
exploration_data_pos_qc$symbol <- as.character(exploration_data_pos_qc$symbol)
exploration_data_pos_qc$"pp_phase" <- "pos"
## add group
exploration_data_pos_qc <- merge(exploration_data_pos_qc,metadata[,c("Olink_ID","condition1")], no.dups = FALSE)
exploration_data_pos_qc$condition1 <- as.factor(exploration_data_pos_qc$condition1)
## plot
ggplot_data <- rbind(exploration_data_pre_qc,exploration_data_pos_qc)
ggplot_data$pp_phase <- factor(x = ggplot_data$pp_phase, levels = c("pre","pos"))
ggplotly(
ggplot(data=ggplot_data, aes(x = Olink_ID, y = NPX, fill=condition1)) +
geom_boxplot() +
ggtitle("Distribution of protein expression") +
facet_wrap(facets = .~pp_phase) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_blank())
)
## by group
ggplotly(
ggplot(ggplot_data, aes(x=NPX, colour=condition1)) +
geom_density() +
ggtitle("Expression density by Group") +
facet_wrap(facets = .~pp_phase) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90),
legend.position = "none")
)
## by sample
ggplotly(
ggplot(ggplot_data, aes(x=NPX, colour=Olink_ID)) +
geom_density() +
ggtitle("Expression density by sample") +
facet_wrap(facets = .~pp_phase) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90),
legend.position = "none")
)
## clean
lskeep <- unique(c(lskeep))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
# run PCA
pca_data <- prcomp(ex)
# extract PC1 and PC2
PC1_plot <- pca_data$rotation[,1:2]
# add phenotype information to PC information
PC1_plot <- data.frame(PC1_plot, "condition1" = metadata$condition1)
PC1_plot$condition1 <- as.character(PC1_plot$condition1)
# ggplot plot
ggplotly(
ggplot(data=PC1_plot, aes(x=PC1, y=PC2, col=condition1)) +
# scatterplot
geom_point() +
# add title to plot
ggtitle("PC1 vs PC2 by condition1") +
# centre title
theme(plot.title = element_text(hjust = 0.5))
)
## clean
lskeep <- unique(c(lskeep))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
#############################
# ExpressionSet
#############################
## phenoData
pdt <- as(metadata, "AnnotatedDataFrame")
## assayData
exp <- ex
### featureData
fdt <- as(ann[row.names(ex),], "AnnotatedDataFrame")
## ExpressionSet
myEset <- ExpressionSet(assayData = exp,
phenoData = pdt,
featureData = fdt)
gse <- myEset
#############################
# LIMMA
#############################
## comparisons
reference <- "0" ## reference group in experimental condition
### setting study groups
tmp <- gse
### setting limma groups contrast matrix
groups <- pData(tmp)$condition1
groups <- factor(groups)
groups <- relevel(x = groups, ref = reference)
pData(tmp)$condition1 <- groups
design <- model.matrix(~ 0 + groups + age_csf + Gender,
gse)
### Linear model fitting for study
fit <- lmFit(object = tmp, design = design, method = "robust", maxit = 1000)
# set up contrasts of interest and recalculate model coefficients
contrast_form <- paste0(paste("groups",rev(levels(groups)),sep=""),
collapse = "-")
contrast.matrix <- makeContrasts(Diff=contrast_form, levels=design)
fit2 <- contrasts.fit(fit = fit, contrasts = contrast.matrix)
fit2 <- eBayes(fit = fit2, proportion = 0.01, robust = TRUE)
tT <- topTable(fit = fit2, adjust="fdr", sort.by="B",
number = 100000, p.value = 1)
tT <- subset(tT,
select=c("ID","adj.P.Val","P.Value","t","B",
"logFC","UniProt","OlinkID"))
row.names(tT) <- NULL
## result outputs
contrast.name <- colnames(contrast.matrix)
fname <- paste(wd_path,"/",
unlist(strsplit(x = basename(metadata_path),
split = "_|\\."))[2],
"_", exp_cond, "_",
contrast.name,"_DEP.txt",sep = "")
write.table(tT, file = fname, sep = "\t")
##
kable(x = tT, format = "html",
caption = "Differentially Expressed Proteins") %>%
kable_styling(latex_options = c("scale_down", "hold_position")) %>%
kable_classic()
## clean
lskeep <- unique(c(lskeep,"myEset","tT"))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
tT2 <- tT
tT2$symbol <- tT$ID
degList <- lapply(list(tT2), function(dt) {
logfc_col <- grep(pattern = "log", x = colnames(dt), ignore.case = T)
pval_col <- grep(pattern = "p*.*value", x = colnames(dt), ignore.case = T)
adjpval_col <- grep(pattern = "adj", x = colnames(dt), ignore.case = T)
symbol_col <- grep(pattern = "symbol", x = colnames(dt), ignore.case = T)
cols <- c(logfc_col, pval_col, adjpval_col, symbol_col)
colnames(dt)[cols] <- c("logFC", "pvalue", "adj.pvalue", "symbol")
return(dt[,cols])
})
degList <- lapply(degList, na.omit)
names(degList) <- paste(unlist(strsplit(x = basename(metadata_path),
split = "_|\\."))[2],
"_", exp_cond, sep = "")
#############################
# Volcano Plots
#############################
make.volcano <- function(deg,
volcano_title,
sig_var,
logfc_var,
sig_threshold = 0.05,
logfc_threshold = 1,
filter = c("both", "sig", "logfc"))
{
filter <- match.arg(arg = NULL, choices = filter)
if(filter == "both") {
color_eval <- deg[,sig_var] < sig_threshold & abs(deg[,logfc_var]) > logfc_threshold
subtitle <- paste("DEG = ", sig_var, " < ", sig_threshold, "AND |logFC| > ", logfc_threshold)
} else if(filter == "sig") {
color_eval <- deg[,sig_var] < sig_threshold
subtitle <- paste("DEP = ", sig_var, " < ", sig_threshold)
} else if(filter == "logfc") {
color_eval <- abs(deg[,logfc_var]) > logfc_threshold
subtitle <- paste("|logFC| > ", logfc_threshold)
}
color_point <- ifelse(color_eval, yes = "red", no = "gray")
deg$color <- color_point
ggplot(data = deg, mapping = aes(x = eval(as.name(logfc_var)), y = -log10(eval(as.name(sig_var))))) +
labs(x = logfc_var, y = sig_var) +
geom_point(size = 1.5, color = color_point) +
ggtitle(label = volcano_title, subtitle = subtitle) +
ylab(label = paste("-logFC(",sig_var,")",sep="")) +
geom_hline(yintercept = -log10(sig_threshold), linetype = 2) +
geom_vline(xintercept = c(-logfc_threshold, logfc_threshold), linetype = 2) +
theme_bw()
}
threshold_cutoff <- 0.05
volcanos <- lapply(names(degList), function(contrast, degs, sig_var, logfc_var, sig_threshold, filter) {
deg <- degs[[contrast]]
make.volcano(deg = deg,
volcano_title = contrast,
sig_var = sig_var,
logfc_var = logfc_var,
sig_threshold = sig_threshold,
filter = filter)
}, degs = degList, sig_var = "pvalue", logfc_var = "logFC", sig_threshold = threshold_cutoff,
filter = "sig")
names(volcanos) <- names(degList)
library(ggrepel)
volcanos <- lapply(volcanos, function(volc) {
volc +
geom_text_repel(
data = subset(volc$data, color == "red"),
aes(label = symbol),
size = 3,
max.overlaps = 15,
nudge_y = 0.25,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
})
print(volcanos[[1]])
## clean
lskeep <- unique(c(lskeep,"degList"))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
tT2 <- tT
tT2$symbol <- tT$ID
degList <- lapply(list(tT2), function(dt) {
logfc_col <- grep(pattern = "log", x = colnames(dt), ignore.case = T)
pval_col <- grep(pattern = "p*.*value", x = colnames(dt), ignore.case = T)
adjpval_col <- grep(pattern = "adj", x = colnames(dt), ignore.case = T)
symbol_col <- grep(pattern = "symbol", x = colnames(dt), ignore.case = T)
cols <- c(logfc_col, pval_col, adjpval_col, symbol_col)
colnames(dt)[cols] <- c("logFC", "pvalue", "adj.pvalue", "symbol")
return(dt[,cols])
})
degList <- lapply(degList, na.omit)
names(degList) <- paste(unlist(strsplit(x = basename(metadata_path),
split = "_|\\."))[2],
"_", exp_cond, sep = "")
#############################
# Volcano Plots
#############################
make.volcano <- function(deg,
volcano_title,
sig_var,
logfc_var,
sig_threshold = 0.05,
logfc_threshold = 1,
filter = c("both", "sig", "logfc"))
{
filter <- match.arg(arg = NULL, choices = filter)
if(filter == "both") {
color_eval <- deg[,sig_var] < sig_threshold & abs(deg[,logfc_var]) > logfc_threshold
subtitle <- paste("DEG = ", sig_var, " < ", sig_threshold, "AND |logFC| > ", logfc_threshold)
} else if(filter == "sig") {
color_eval <- deg[,sig_var] < sig_threshold
subtitle <- paste("DEP = ", sig_var, " < ", sig_threshold)
} else if(filter == "logfc") {
color_eval <- abs(deg[,logfc_var]) > logfc_threshold
subtitle <- paste("|logFC| > ", logfc_threshold)
}
color_point <- ifelse(color_eval, yes = "red", no = "gray")
deg$color <- color_point
ggplot(data = deg, mapping = aes(x = eval(as.name(logfc_var)), y = -log10(eval(as.name(sig_var))))) +
labs(x = logfc_var, y = sig_var) +
geom_point(size = 1.5, color = color_point) +
ggtitle(label = volcano_title, subtitle = subtitle) +
ylab(label = paste("-logFC(",sig_var,")",sep="")) +
geom_hline(yintercept = -log10(sig_threshold), linetype = 2) +
geom_vline(xintercept = c(-logfc_threshold, logfc_threshold), linetype = 2) +
theme_bw()
}
threshold_cutoff <- 0.05
volcanos <- lapply(names(degList), function(contrast, degs, sig_var, logfc_var, sig_threshold, filter) {
deg <- degs[[contrast]]
make.volcano(deg = deg,
volcano_title = contrast,
sig_var = sig_var,
logfc_var = logfc_var,
sig_threshold = sig_threshold,
filter = filter)
}, degs = degList, sig_var = "pvalue", logfc_var = "logFC", sig_threshold = threshold_cutoff,
filter = "sig")
names(volcanos) <- names(degList)
library(ggrepel)
volcanos <- lapply(volcanos, function(volc) {
volc +
geom_text_repel(
data = subset(volc$data, color == "red"),
aes(label = symbol),
size = 3,
max.overlaps = 15,
nudge_y = 0.25,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
})
print(volcanos[[1]])
## clean
lskeep <- unique(c(lskeep,"degList"))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
tT2 <- tT
tT2$symbol <- tT$ID
degList <- lapply(list(tT2), function(dt) {
logfc_col <- grep(pattern = "log", x = colnames(dt), ignore.case = T)
pval_col <- grep(pattern = "p*.*value", x = colnames(dt), ignore.case = T)
adjpval_col <- grep(pattern = "adj", x = colnames(dt), ignore.case = T)
symbol_col <- grep(pattern = "symbol", x = colnames(dt), ignore.case = T)
cols <- c(logfc_col, pval_col, adjpval_col, symbol_col)
colnames(dt)[cols] <- c("logFC", "pvalue", "adj.pvalue", "symbol")
return(dt[,cols])
})
degList <- lapply(degList, na.omit)
names(degList) <- paste(unlist(strsplit(x = basename(metadata_path),
split = "_|\\."))[2],
"_", exp_cond, sep = "")
#############################
# Volcano Plots
#############################
make.volcano <- function(deg,
volcano_title,
sig_var,
logfc_var,
sig_threshold = 0.05,
logfc_threshold = 1,
filter = c("both", "sig", "logfc"))
{
filter <- match.arg(arg = NULL, choices = filter)
if(filter == "both") {
color_eval <- deg[,sig_var] < sig_threshold & abs(deg[,logfc_var]) > logfc_threshold
subtitle <- paste("DEG = ", sig_var, " < ", sig_threshold, "AND |logFC| > ", logfc_threshold)
} else if(filter == "sig") {
color_eval <- deg[,sig_var] < sig_threshold
subtitle <- paste("DEP = ", sig_var, " < ", sig_threshold)
} else if(filter == "logfc") {
color_eval <- abs(deg[,logfc_var]) > logfc_threshold
subtitle <- paste("|logFC| > ", logfc_threshold)
}
color_point <- ifelse(color_eval, yes = "red", no = "gray")
deg$color <- color_point
ggplot(data = deg, mapping = aes(x = eval(as.name(logfc_var)), y = -log10(eval(as.name(sig_var))))) +
labs(x = logfc_var, y = sig_var) +
geom_point(size = 1.5, color = color_point) +
ggtitle(label = volcano_title, subtitle = subtitle) +
ylab(label = paste("-logFC(",sig_var,")",sep="")) +
geom_hline(yintercept = -log10(sig_threshold), linetype = 2) +
geom_vline(xintercept = c(-logfc_threshold, logfc_threshold), linetype = 2) +
theme_bw()
}
threshold_cutoff <- 0.05
volcanos <- lapply(names(degList), function(contrast, degs, sig_var, logfc_var, sig_threshold, filter) {
deg <- degs[[contrast]]
make.volcano(deg = deg,
volcano_title = contrast,
sig_var = sig_var,
logfc_var = logfc_var,
sig_threshold = sig_threshold,
filter = filter)
}, degs = degList, sig_var = "pvalue", logfc_var = "logFC", sig_threshold = threshold_cutoff,
filter = "sig")
names(volcanos) <- names(degList)
library(ggrepel)
volcanos <- lapply(volcanos, function(volc) {
volc +
geom_text_repel(
data = subset(volc$data, color == "red"),
aes(label = symbol),
size = 3,
max.overlaps = 15,
nudge_y = 0.25,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
})
View(volcanos[[1]]$data)
print(volcanos[[1]])
#############################
# Data
#############################
files <- dir()
files <- files[grep(pattern = "Giovanna_MetaAnalysis.txt", x = files)]
data_original <- read.delim(file = files, header = TRUE, sep = "\t", dec = ",")
#############################
# Data
#############################
files <- dir()
files <- files[grep(pattern = "Giovanna_MetaAnalysis.txt", x = files)]
data_original <- read.delim(file = files, header = TRUE, sep = "\t", dec = ",")
setwd("/mnt/hd2/Giovanna_meta_git")
#############################
# Data
#############################
files <- dir()
files <- files[grep(pattern = "Giovanna_MetaAnalysis.txt", x = files)]
setwd("/mnt/hd2/Giovanna_meta_git/1_1_results_BrainRegions_and_Biofluids")
#############################
# Data
#############################
files <- dir()
files <- files[grep(pattern = "Giovanna_MetaAnalysis.txt", x = files)]
data_original <- read.delim(file = files, header = TRUE, sep = "\t", dec = ",")
source(file = paste(dirname(getwd()), "MetaA_GregorAdapt_202206.R", sep = "/"))
