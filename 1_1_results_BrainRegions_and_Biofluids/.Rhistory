taxaTab <- assignTaxonomy(seqs = seqtab, refFasta = tx_trainset, multithread = TRUE)
taxaTab <- addSpecies(taxtab = taxaTab, refFasta = tx_assignset)
### remove unassigned sequences at Kingdom level
phylum_taxa <- which(is.na(taxaTab[,2]))
if(length(phylum_taxa) != 0) {
taxaTab <- taxaTab[-phylum_taxa,]
}
seqtab <- seqtab[,setdiff(colnames(seqtab), names(phylum_taxa))]
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
sid
names(sapply(sid, grep, x = row.names(seqtab)))
# names(sid) <- row.names(seqtab)[sapply(sid, grep, x = row.names(seqtab))]
names(sid) <- names(sapply(sid, grep, x = row.names(seqtab)))
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
row.names(seqtab)
seqtab1 <- seqtab
seqtab <- seqtab[,c(2,4,5,1,3)]
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
sid
names(sapply(sid, grep, x = row.names(seqtab)))
row.names(seqtab)
seqtab = seqtab1
seqtab <- seqtab[c(2,4,5,1,3),]
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
names(sapply(sid, grep, x = row.names(seqtab)))
row.names(seqtab)
sapply(sid, grep, x = row.names(seqtab))
row.names(seqtab)[sapply(sid, grep, x = row.names(seqtab))]
names(sid) <- row.names(seqtab)[sapply(sid, grep, x = row.names(seqtab))]
sid
sample_data$sid <- sid
row.names(sample_data) <- sid
sample_data
sid[colnames(OTU_tab)[-c(1)]]
colnames(OTU_tab)[-c(1)] <- sid[colnames(OTU_tab)[-c(1)]]
## phyloseq sample
otutable <- otu_table(OTU_tab[,-c(1),drop=FALSE], taxa_are_rows=T)
sampledata <- sample_data(sample_data)
taxtable <- tax_table(tax_tab)
# phytree <- phy_tree(fitGTR$tree)
ps <- phyloseq(otutable,
sampledata,
taxtable)
ps
ps_phy <- tax_glom(ps,"Phylum")
ps_phy@otu_table@.Data
View(ps_phy@otu_table@.Data)
ps
ps@sam_data@names
ps@sam_data@row.names
#############################
# Package Install/Load
#############################
library(RColorBrewer)
#############################
# Paths
#############################
## directories
wd <- "/mnt/hd/Marco/Dropbox/Nintx/"
scripts_dir <- paste(wd, "Scripts/16S_Illumina", sep = "/")
request_path <- paste(wd, "request20230301_4/16S_bacteria_trimadaptors_silva/", sep = "/")
raw_dir <- paste(request_path,
dir(request_path)[grep(pattern = "rawfiles", x = dir(request_path))],
sep = "/")
pp_dir <- paste(request_path, "0_2_preProcessed", sep = "/")
dada_ndir <- paste(request_path, "1_1_0_outputFilesDada2", sep = "/")
ma_ndir <- paste(request_path, "2_1_0_MicrobiomeAnalystR", sep = "/")
pi_ndir <- paste(request_path, "3_2_0_PipelineIntermediaries", sep = "/")
## metadata
metadata_filepath <- paste(request_path,
dir(request_path)[grep(pattern = "metadata.txt", x = dir(request_path))],
sep = "/")
## taxa paths
tx_trainset <- paste(wd, "silva_nr_v132_train_set.fa.gz", sep = "/")
tx_assignset <- paste(wd, "silva_species_assignment_v132.fa.gz", sep = "/")
## adapter path
adapter_path_pe <- "/mnt/hd/Marco/Dropbox/Trimmomatic/Trimmomatic-0.39/adapters/Adapter_Nintx_request20230301.fa"
adapter_path_se <- NULL
#############################
## add-ons
#############################
modify_pipe <- NULL
nintx_greens <- RColorBrewer::brewer.pal(n = 9, name = "Greens")[-1]
nintx_grays <- RColorBrewer::brewer.pal(n = 9, name = "Greys")[-1]
#############################
## Pipeline Arguments
#############################
## processing arguments
transform_opt <- "none" # c("none", "rle", "TMM", "clr")
norm_opt <- "rarewo" # c("none", "iterative_rare", "rarewi", "rarewo", "gmpr", "deseq2", "edger", "scuttle_snLSF", "scuttle_snLSF_geom")
scale_opt <- "none" # c("none", "colsum", "upperquartile", "CSS")
VictoriaMesa_adapt = FALSE
## rarefactioncurve1 chunk
metadata_rarecurve1 <- "obs1"
linetype_rarecurve1 <- "id"
## rarefactioncurve2 chunk
metadata_rarecurve2 <- "obs1"
linetype_rarecurve2 <- "id"
## libsize chunk
metadata_libsize <- "id"
## abundanceplot_prep chunk
facet_relabund <- "obs2"
taxa_relabund <- c("Phylum", "Family", "Genus")
## other1 chunk
metadata_toptaxa <- "obs2"
taxa_toptaxa <- c("Phylum", "Family", "Genus")
## alphadiv chunk
metadata_adivers <- "obs1"
taxa_divers <- c("Phylum", "Family", "Genus")
## betadiv chunk
metadata_bdivers <- "obs1"
showlabel_bdivers <- "id"
distName_bdivers <-  c("bray", "unifrac", "wunifrac", "jaccard")
## heatmap1 chunk
metadata_hm <- c("obs1", "obs2")
metadata_hm_1 <- c("obs2")
taxa_hm <- c("Phylum", "Family", "Genus")
order_column <- NULL
order_row_ev <- FALSE
order_row <- NULL
## lda chunk
metadata_lda <- c("obs1")
taxa_lda <- c("Phylum", "Family", "Genus")
contrast_reference_lda <- "Reator1"
lda.threshold <- 1
#############################
# create report - removing adaptors
#############################
## html report SHORT
report_path <- paste("/mnt/hd/Marco/Dropbox/Nintx/MetaNintx_trimadaptors_16S_short_Illv1.Rmd",
sep = "/")
template_path <- paste(report_path, sep = "/")
out_fname <- gsub(pattern = ".Rmd", replacement = "", x = basename(report_path))
out_fname <- paste(request_path, "/", out_fname, ".html", sep = "")
out_dir <- paste(request_path, sep = "/")
rmarkdown::render(input = template_path,
output_format = "html_document",
output_file = out_fname,
output_dir = out_dir)
#############################
# Package Install/Load
#############################
library(RColorBrewer)
#############################
# Paths
#############################
## directories
wd <- "/mnt/hd/Marco/Dropbox/Nintx/"
scripts_dir <- paste(wd, "Scripts/16S_Illumina", sep = "/")
request_path <- paste(wd, "request20230301_9/16S_bacteria_trimadaptors_silva/", sep = "/")
raw_dir <- paste(request_path,
dir(request_path)[grep(pattern = "rawfiles", x = dir(request_path))],
sep = "/")
pp_dir <- paste(request_path, "0_2_preProcessed", sep = "/")
dada_ndir <- paste(request_path, "1_1_0_outputFilesDada2", sep = "/")
ma_ndir <- paste(request_path, "2_1_0_MicrobiomeAnalystR", sep = "/")
pi_ndir <- paste(request_path, "3_2_0_PipelineIntermediaries", sep = "/")
## metadata
metadata_filepath <- paste(request_path,
dir(request_path)[grep(pattern = "metadata.txt", x = dir(request_path))],
sep = "/")
## taxa paths
tx_trainset <- paste(wd, "silva_nr_v132_train_set.fa.gz", sep = "/")
tx_assignset <- paste(wd, "silva_species_assignment_v132.fa.gz", sep = "/")
## adapter path
adapter_path_pe <- "/mnt/hd/Marco/Dropbox/Trimmomatic/Trimmomatic-0.39/adapters/Adapter_Nintx_request20230301.fa"
adapter_path_se <- NULL
#############################
## add-ons
#############################
modify_pipe <- NULL
nintx_greens <- RColorBrewer::brewer.pal(n = 9, name = "Greens")[-1]
nintx_grays <- RColorBrewer::brewer.pal(n = 9, name = "Greys")[-1]
#############################
## Pipeline Arguments
#############################
## processing arguments
transform_opt <- "none" # c("none", "rle", "TMM", "clr")
norm_opt <- "rarewo" # c("none", "iterative_rare", "rarewi", "rarewo", "gmpr", "deseq2", "edger", "scuttle_snLSF", "scuttle_snLSF_geom")
scale_opt <- "none" # c("none", "colsum", "upperquartile", "CSS")
VictoriaMesa_adapt = FALSE
## rarefactioncurve1 chunk
metadata_rarecurve1 <- "obs1"
linetype_rarecurve1 <- "id"
## rarefactioncurve2 chunk
metadata_rarecurve2 <- "obs1"
linetype_rarecurve2 <- "id"
## libsize chunk
metadata_libsize <- "id"
## abundanceplot_prep chunk
facet_relabund <- "obs2"
taxa_relabund <- c("Phylum", "Family", "Genus")
## other1 chunk
metadata_toptaxa <- "obs2"
taxa_toptaxa <- c("Phylum", "Family", "Genus")
## alphadiv chunk
metadata_adivers <- "obs1"
taxa_divers <- c("Phylum", "Family", "Genus")
## betadiv chunk
metadata_bdivers <- "obs1"
showlabel_bdivers <- "id"
distName_bdivers <-  c("bray", "unifrac", "wunifrac", "jaccard")
## heatmap1 chunk
metadata_hm <- c("obs1", "obs2")
metadata_hm_1 <- c("obs2")
taxa_hm <- c("Phylum", "Family", "Genus")
order_column <- NULL
order_row_ev <- FALSE
order_row <- NULL
## lda chunk
metadata_lda <- c("obs1")
taxa_lda <- c("Phylum", "Family", "Genus")
contrast_reference_lda <- "Reator1"
lda.threshold <- 1
#############################
# create report - removing adaptors
#############################
## html report SHORT
report_path <- paste("/mnt/hd/Marco/Dropbox/Nintx/MetaNintx_trimadaptors_16S_short_Illv1.Rmd",
sep = "/")
template_path <- paste(report_path, sep = "/")
out_fname <- gsub(pattern = ".Rmd", replacement = "", x = basename(report_path))
out_fname <- paste(request_path, "/", out_fname, ".html", sep = "")
out_dir <- paste(request_path, sep = "/")
rmarkdown::render(input = template_path,
output_format = "html_document",
output_file = out_fname,
output_dir = out_dir)
## html report FULL
report_path <- paste("/mnt/hd/Marco/Dropbox/Nintx/MetaNintx_trimadaptors_16S_full_Illv1.Rmd",
sep = "/")
template_path <- paste(report_path, sep = "/")
out_fname <- gsub(pattern = ".Rmd", replacement = "", x = basename(report_path))
out_fname <- paste(request_path, "/", out_fname, ".html", sep = "")
out_dir <- paste(request_path, sep = "/")
rmarkdown::render(input = template_path,
output_format = "html_document",
output_file = out_fname,
output_dir = out_dir)
deseq <- read.delim("/mnt/hd/Marco/Dropbox/LaviniaPerquim/GSE158995/CIRI_DE/circ_mutation-control_DEG.txt")
View(deseq)
edger <- read.delim("/mnt/hd/Marco/Dropbox/LaviniaPerquim/GSE158995/CIRI_DE/circRNA_de.txt")
View(edger)
top50_deseq <- deseq[1:50,]
top50_edger <p edger[1:50,]
top50_edger <- edger[1:50,]
View(top50_deseq)
View(top50_edger)
View(top50_deseq)
top50g_deseq <- top50_deseq$gene_name
top50g_edger <- top50_edger$gene_name
top50g_deseq <- strsplit(x = top50g_deseq, split = ",")
top50g_deseq
unlist(top50g_deseq)
top50g_deseq <- unlist(top50g_deseq)
top50g_edger <- strsplit(x = top50g_edger, split = ",")
top50g_edger <- unlist(top50g_edger)
instersect(top50g_edger, top50g_deseq)
intersect(top50g_edger, top50g_deseq)
View(top50_deseq)
View(deseq)
View(edger)
View(deseq)
View(edger)
View(deseq)
View(deseq)
2/3
library(metafor)
#############################
# Data
#############################
files <- dir()
files
setwd("/mnt/hd2/Carello-Collar_GABAergicMeta-analysis/1_1_results_BrainRegions_and_Biofluids")
#############################
# Data
#############################
files <- dir()
files <- files[grep(pattern = "Giovanna_MetaAnalysis.txt", x = files)]
data_original <- read.delim(file = files, header = TRUE, sep = "\t", dec = ",")
#############################
# Package Install/Load
#############################
## DOI: 10.1016/j.brs.2021.05.014
library(metafor)
library(dplyr)
library(metaviz)
library(ggplot2)
### Columns description ###
#### - study: list of different studies
#### - brain_region: list of brain regions in each study
#### - n_c: number of samples in reference group for each study
#### - m_c: mean of samples in reference group for each study
#### - sd_c: standard deviation in reference group for each study
#### - n_t: number of samples in test group for each study
#### - m_t: mean of samples in test group for each study
#### - sd_t: standard deviation in test group for each study
#### - n_s: number of subjects in study
colnames(data_original) <- tolower(colnames(data_original))
data_split <- split(x = data_original, f = data_original$table.id)
resList <- lapply(data_split, function(data) {
#############################
# Calculate Effect Sizes
#############################
data_escalc <- escalc(n1i = n_t, m1i = m_t, sd1i = sd_t, n2i = n_c, m2i = m_c, sd2i = sd_c, measure = "SMD",
data = data, vtype = "UB", append = F)
# I use vtype = UB in my publications, it's more conservative
data <- cbind(data, data_escalc)
dup <- data$study[duplicated(data$study)]
data_dup <- data[data$study%in%dup,]
data_unique <- data[!data$study%in%dup,]
row.names(data_unique) <- data_unique$study
if(nrow(data_dup)>0) {
n_samples <- split(x = data_dup, f = data_dup$study)
n_samples <- lapply(n_samples, function(x) c(sum(x$n_c), sum(x$n_t)))
n_samples <- do.call("rbind", n_samples)
colnames(n_samples) <- c("n_c", "n_t")
n_samples <- rbind(n_samples, data_unique[,c("n_c","n_t")])
colnames(n_samples) <- c("n_samples_c", "n_samples_t")
} else {
n_samples <- data_unique[,c("n_c","n_t")]
colnames(n_samples) <- c("n_samples_c", "n_samples_t")
}
#############################
# Combined SMD (adjusted standardized mean difference by fixed-effect model)
#############################
studs <- unique(data_dup$study)
res <- lapply(studs, function(x, dt) {
ourdata <- dt[dt$study==x,]
z <- rma.uni(yi = yi, vi = vi, measure = "SMD",
data = ourdata, method = "FE")
c(z[1],x)
}, dt = data_dup)
data_comb <- data_dup[!duplicated(data_dup$study),]
row.names(data_comb) <- data_comb$study
for(s in studs) {
data_comb[s, "n_c"] <- max(data_comb[s, "n_c"])
data_comb[s, "n_t"] <- max(data_comb[s, "n_t"])
}
data_comb$yi <- as.numeric(lapply(res, '[[',1))
data_comb$vi <- ((data_comb$n_c + data_comb$n_t)/(data_comb$n_c * data_comb$n_t) +
data_comb$yi^2)/(2*(data_comb$n_c + data_comb$n_t))
# here you have to be consistent with the vtype above
# (you can find the formula corresponding to your outcome measure in the escalc function script,
# for SMD and vtype UB  it is: (n1+n2)/(n1*n2) +y^2 / (2*(n1+n2)) )
#############################
# Random-effect model
#############################
data_final <- rbind(data_unique, data_comb)
data_final$ci_low <- data_final$yi - (stats::qnorm(1 - (1 - 0.95)/2) * as.numeric(sqrt(data_final$vi)))
data_final$ci_high <- data_final$yi + (stats::qnorm(1 - (1 - 0.95)/2) * as.numeric(sqrt(data_final$vi)))
data_final <- cbind(data_final, n_samples[data_final$study,])
row.names(data_final) <- data_final$id
data_final <- data_final[as.character(unique(data$id)),]
res <- rma.uni(yi, vi, data = data_final, method="DL",
slab = paste(data_final$stud,
sep=""))
return(res)
})
resList[[1]]
table_indiv <- lapply(resList, function(x) {
d <- x$data
w <- weights(x)
d$weights <- w[d$study]
return(d)
})
table_indiv <- do.call("rbind", table_indiv)
row.names(table_indiv) <- NULL
View(table_indiv)
table_synthesis <- lapply(resList, function(x) {
w <- weights(x)
fstats <- fitstats(x)[,1]
names(fstats) <- gsub(pattern = ":", replacement = "", x = names(fstats))
c("SMD" = round(x$beta, 2), "CI_lower" = round(x$ci.lb, 2),
"CI_upper" = round(x$ci.ub, 2), "pvalue" = round(x$pval,3), "zvalue" = round(x$zval,3),
"I2" = round(x$I2, 2), "tau2" = round(x$tau2, 2), round(fstats, 3),
# "weights" = paste(paste(names(w), round(w,2), sep = " = "), collapse = "; "),
"sum_sample_size_c" = sum(x$data$n_samples_c),
"sum_sample_size_t" = sum(x$data$n_samples_t),
"sum_indiv_size_c" = sum(x$data$n_c),
"sum_indiv_size_t" = sum(x$data$n_t))
})
table_synthesis <- do.call("rbind", table_synthesis)
table_synthesis <- data.frame("ID" = row.names(table_synthesis), table_synthesis,
stringsAsFactors = FALSE)
View(table_synthesis)
table_egger <- lapply(names(resList), function(nm, l) {
x <- l[[nm]]
if(nrow(x$data)>2) {
egger <- regtest(x)
data.frame("ID" = nm, "Std_Eff" = c("intercept", "slope_bias"), "coefficient" = egger$fit$beta,
"std_error" = egger$fit$se, "zvalue" = egger$fit$zval,
"pvalue" = egger$fit$pval, "CI_low" = egger$fit$ci.lb,
"CI_high" = egger$fit$ci.ub)
} else {
data.frame("ID" = nm, "Std_Eff" = NA, "coefficient" = NA,
"std_error" = NA, "zvalue" = NA,
"pvalue" = NA, "CI_low" = NA,
"CI_high" = NA)
}
}, l = resList)
table_egger <- do.call("rbind", table_egger)
table_egger
View(table_egger)
table_jackknife <- lapply(names(resList), function(nm, l) {
x <- l[[nm]]
jackk <- data.frame(leave1out(x))
data.frame("ID" = nm, "study" = row.names(jackk), jackk)
}, l = resList)
table_jackknife <- do.call("rbind", table_jackknife)
forestPlots <- lapply(resList, function(x) {
sum_table <- x$data[,c("study", "n_c", "n_t", "n_samples_c", "n_samples_t")]
sum_table$weights <- round(weights(x), 3)
sum_table <- rbind(sum_table,
"All studies" = c("study" = "All studies",
"n_c" = sum(sum_table$n_c),
"n_t" = sum(sum_table$n_t),
"n_samples_c" = sum(sum_table$n_samples_c),
"n_samples_t" = sum(sum_table$n_samples_t),
"weights" = round(sum(sum_table$weights))))
sum_table$"n_c/n_t" <- paste(sum_table$n_c, sum_table$n_t, sep = "/")
sum_table$"n_samples_c/n_samples_t" <- paste(sum_table$n_samples_c, sum_table$n_samples_t, sep = "/")
sum_table <- sum_table[,c(1,7,8,6)]
viz_forest(x = x, type = "standard", variant = "classic",
study_labels = x$data$study,
summary_label = "Summary RE Model", xlab = "SMD",
study_table = sum_table[1:(nrow(sum_table)-1),],
summary_table = sum_table[nrow(sum_table),,drop=FALSE],
table_headers = c("Study", "Individuals (CU/AD)",
"Samples (CU/AD)", "Weights (%)"),
annotate_CI = TRUE, col = "gray",
table_layout = matrix(c(2, 2, 1, 1, 3), nrow = 1))
})
forestPlots$table1[[1]]
forestPlots$table1
forestPlots <- lapply(resList, function(x) {
sum_table <- x$data[,c("study", "n_c", "n_t", "n_samples_c", "n_samples_t")]
sum_table$weights <- round(weights(x), 3)
sum_table <- rbind(sum_table,
"All studies" = c("study" = "All studies",
"n_c" = sum(sum_table$n_c),
"n_t" = sum(sum_table$n_t),
"n_samples_c" = sum(sum_table$n_samples_c),
"n_samples_t" = sum(sum_table$n_samples_t),
"weights" = round(sum(sum_table$weights))))
sum_table$"n_c/n_t" <- paste(sum_table$n_c, sum_table$n_t, sep = "/")
sum_table$"n_samples_c/n_samples_t" <- paste(sum_table$n_samples_c, sum_table$n_samples_t, sep = "/")
sum_table <- sum_table[,c(1,7,8,6)]
viz_forest(x = x, type = "standard", variant = "classic",
study_labels = x$data$study,
summary_label = "Summary RE Model", xlab = "SMD",
study_table = sum_table[1:(nrow(sum_table)-1),],
summary_table = sum_table[nrow(sum_table),,drop=FALSE],
table_headers = c("Study", "Individuals (HC/AD)",
"Samples (HC/AD)", "Weights (%)"),
annotate_CI = TRUE, col = "gray",
table_layout = matrix(c(2, 2, 1, 1, 3), nrow = 1))
})
forestPlots[[1]]
length(data_split)
