unique(sample_data$id)
sid <- unique(sample_data$id)
sapply(sid, grep, x = row.names(seqtab))
names(sid) <- sapply(sid, grep, x = row.names(seqtab))
sid
colnames(OTU_tab)
row.names(seqtab)[sapply(sid, grep, x = row.names(seqtab))]
colnames(seqtab)
row.names(seqtab)
names(dadasFinal)
#############################
# Package Install/Load
#############################
library(RColorBrewer)
#############################
# Paths
#############################
## directories
wd <- "/mnt/hd/Marco/Dropbox/Nintx/"
scripts_dir <- paste(wd, "Scripts/16S_Illumina", sep = "/")
request_path <- paste(wd, "request20230301_8/16S_bacteria_trimadaptors_silva/", sep = "/")
raw_dir <- paste(request_path,
dir(request_path)[grep(pattern = "rawfiles", x = dir(request_path))],
sep = "/")
pp_dir <- paste(request_path, "0_2_preProcessed", sep = "/")
dada_ndir <- paste(request_path, "1_1_0_outputFilesDada2", sep = "/")
ma_ndir <- paste(request_path, "2_1_0_MicrobiomeAnalystR", sep = "/")
pi_ndir <- paste(request_path, "3_2_0_PipelineIntermediaries", sep = "/")
## metadata
metadata_filepath <- paste(request_path,
dir(request_path)[grep(pattern = "metadata.txt", x = dir(request_path))],
sep = "/")
## taxa paths
tx_trainset <- paste(wd, "silva_nr_v132_train_set.fa.gz", sep = "/")
tx_assignset <- paste(wd, "silva_species_assignment_v132.fa.gz", sep = "/")
## adapter path
adapter_path_pe <- "/mnt/hd/Marco/Dropbox/Trimmomatic/Trimmomatic-0.39/adapters/Adapter_Nintx_request20230301.fa"
adapter_path_se <- NULL
#############################
## add-ons
#############################
modify_pipe <- NULL
nintx_greens <- RColorBrewer::brewer.pal(n = 9, name = "Greens")[-1]
nintx_grays <- RColorBrewer::brewer.pal(n = 9, name = "Greys")[-1]
#############################
## Pipeline Arguments
#############################
## processing arguments
transform_opt <- "none" # c("none", "rle", "TMM", "clr")
norm_opt <- "rarewo" # c("none", "iterative_rare", "rarewi", "rarewo", "gmpr", "deseq2", "edger", "scuttle_snLSF", "scuttle_snLSF_geom")
scale_opt <- "none" # c("none", "colsum", "upperquartile", "CSS")
VictoriaMesa_adapt = FALSE
## rarefactioncurve1 chunk
metadata_rarecurve1 <- "obs1"
linetype_rarecurve1 <- "id"
## rarefactioncurve2 chunk
metadata_rarecurve2 <- "obs1"
linetype_rarecurve2 <- "id"
## libsize chunk
metadata_libsize <- "id"
## abundanceplot_prep chunk
facet_relabund <- "obs2"
taxa_relabund <- c("Phylum", "Family", "Genus")
## other1 chunk
metadata_toptaxa <- "obs2"
taxa_toptaxa <- c("Phylum", "Family", "Genus")
## alphadiv chunk
metadata_adivers <- "obs1"
taxa_divers <- c("Phylum", "Family", "Genus")
## betadiv chunk
metadata_bdivers <- "obs1"
showlabel_bdivers <- "id"
distName_bdivers <-  c("bray", "unifrac", "wunifrac", "jaccard")
## heatmap1 chunk
metadata_hm <- c("obs1", "obs2")
metadata_hm_1 <- c("obs2")
taxa_hm <- c("Phylum", "Family", "Genus")
order_column <- NULL
order_row_ev <- FALSE
order_row <- NULL
## lda chunk
metadata_lda <- c("obs1")
taxa_lda <- c("Phylum", "Family", "Genus")
contrast_reference_lda <- "Reator1"
lda.threshold <- 1
#############################
# Package Install/Load
#############################
library(R.utils)
setwd(wd)
#############################
# Metadata Table
#############################
RunTable <- read.delim2(file = metadata_filepath)
oncol <- ncol(RunTable)
RunTable$rawfiles_path <- paste(raw_dir, RunTable$rawfiles_names, sep = "/")
## clean
lskeep <- c("lskeep", ls())
#############################
# Evaluate files
#############################
file_eval <- file.exists(RunTable$rawfiles_path)
if(all(file_eval)) {
file_eval <- TRUE
file_evaltext <- paste("All raw files from", basename(metadata_filepath),
"found in", raw_dir, "!")
} else {
file_eval <- FALSE
file_evaltext <- paste("Some files from", basename(metadata_filepath),
"not found in", raw_dir, "!")
stop(file_evaltext)
}
## clean
lskeep <- unique(c(lskeep,"file_evaltext","oncol"))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
#############################
# Metadata Table
#############################
RunTable$raws_compressed <- grepl(pattern = ".gz$|.zip$|.rar", x = RunTable$rawfiles_names, ignore.case = TRUE)
if(any(RunTable$raws_compressed)) {
RunTable$uncompressed_rawpaths <- NA
}
if(any(!RunTable$raws_compressed)) {
RunTable$uncompressed_rawpaths[which(!RunTable$raws_compressed)] <- RunTable$rawfiles_path[which(!RunTable$raws_compressed)]
}
ncompressed <- sum(RunTable$raws_compressed)
#############################
# Uncompress
#############################
if(any(RunTable$raws_compressed)) {
for(i in which(RunTable$raws_compressed)) {
npath <- gsub(pattern = ".gz$|.zip$|.rar", replacement = "", x = RunTable$rawfiles_path[i])
RunTable$uncompressed_rawpaths[i] <- npath
if(!file.exists(RunTable$uncompressed_rawpaths[i])) {
gunzip(filename = RunTable$rawfiles_path[i],
destname = RunTable$uncompressed_rawpaths[i],
remove = FALSE)
}
}
}
## clean
lskeep <- unique(c(lskeep,"ncompressed"))
rm(list = ls()[!ls()%in%lskeep])
lskeep <- union(lskeep, ls())
#############################
# Package Install/Load
#############################
library(phyloseq)
library(dada2)
library(R.utils)
library(ShortRead)
library(DECIPHER)
library(phangorn)
library(phytools)
###  DADA2 Pipeline - https://benjjneb.github.io/dada2/tutorial.html
### https://bioconductor.org/help/course-materials/2017/BioC2017/Day1/Workshops/Microbiome/MicrobiomeWorkflowII.html
#############################
# Data
#############################
load(paste(pp_dir, "dadaObject.RData", sep = "/"))
names(dadasFinal)
base::load("/mnt/hd/Marco/Dropbox/Nintx/request20230301_4/16S_bacteria_trimadaptors_silva/0_2_preProcessed/dadaObject.RData")
names(dadasFinal)
base::load("/mnt/hd/Marco/Dropbox/Nintx/request20230301_7/16S_bacteria_trimadaptors_silva/0_2_preProcessed/dadaObject.RData")
names(dadasFinal)
#############################
# Data
#############################
load(paste(pp_dir, "dadaObject.RData", sep = "/"))
#############################
# Construct sequence table and remove chimeras
#############################
## We can now construct an amplicon sequence variant table(ASV) table, a higher-resolution version of the OTU table produced by traditional methods.
seqtab_ori <- makeSequenceTable(dadasFinal, orderBy = NULL)
## remove chimeric sequences by comparing each inferred sequence to the others in the table, and removing those that can be reproduced by stitching together two more abundant sequences
seqtab <- removeBimeraDenovo(unqs = seqtab_ori,  method = "per-sample", multithread = TRUE)
#############################
# Assign taxonomy
#############################
taxaTab <- assignTaxonomy(seqs = seqtab, refFasta = tx_trainset, multithread = TRUE)
taxaTab <- addSpecies(taxtab = taxaTab, refFasta = tx_assignset)
### remove unassigned sequences at Kingdom level
phylum_taxa <- which(is.na(taxaTab[,2]))
if(length(phylum_taxa) != 0) {
taxaTab <- taxaTab[-phylum_taxa,]
}
seqtab <- seqtab[,setdiff(colnames(seqtab), names(phylum_taxa))]
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
sid
names(sapply(sid, grep, x = row.names(seqtab)))
# names(sid) <- row.names(seqtab)[sapply(sid, grep, x = row.names(seqtab))]
names(sid) <- names(sapply(sid, grep, x = row.names(seqtab)))
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
row.names(seqtab)
seqtab1 <- seqtab
seqtab <- seqtab[,c(2,4,5,1,3)]
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
sid
names(sapply(sid, grep, x = row.names(seqtab)))
row.names(seqtab)
seqtab = seqtab1
seqtab <- seqtab[c(2,4,5,1,3),]
#############################
# Combine data into a phyloseq object
#############################
## otu_table
OTU_tab <- t(seqtab)
OTU_tab <- data.frame("seq" = row.names(OTU_tab),
OTU_tab,
stringsAsFactors = F,
check.names = F)
## tax_table
tax_tab <- taxaTab
## sample_data
sample_data <- unique(RunTable[,c("id"),drop=FALSE])
sid <- unique(sample_data$id)
names(sapply(sid, grep, x = row.names(seqtab)))
row.names(seqtab)
sapply(sid, grep, x = row.names(seqtab))
row.names(seqtab)[sapply(sid, grep, x = row.names(seqtab))]
names(sid) <- row.names(seqtab)[sapply(sid, grep, x = row.names(seqtab))]
sid
sample_data$sid <- sid
row.names(sample_data) <- sid
sample_data
sid[colnames(OTU_tab)[-c(1)]]
colnames(OTU_tab)[-c(1)] <- sid[colnames(OTU_tab)[-c(1)]]
## phyloseq sample
otutable <- otu_table(OTU_tab[,-c(1),drop=FALSE], taxa_are_rows=T)
sampledata <- sample_data(sample_data)
taxtable <- tax_table(tax_tab)
# phytree <- phy_tree(fitGTR$tree)
ps <- phyloseq(otutable,
sampledata,
taxtable)
ps
ps_phy <- tax_glom(ps,"Phylum")
ps_phy@otu_table@.Data
View(ps_phy@otu_table@.Data)
ps
ps@sam_data@names
ps@sam_data@row.names
#############################
# Package Install/Load
#############################
library(RColorBrewer)
#############################
# Paths
#############################
## directories
wd <- "/mnt/hd/Marco/Dropbox/Nintx/"
scripts_dir <- paste(wd, "Scripts/16S_Illumina", sep = "/")
request_path <- paste(wd, "request20230301_4/16S_bacteria_trimadaptors_silva/", sep = "/")
raw_dir <- paste(request_path,
dir(request_path)[grep(pattern = "rawfiles", x = dir(request_path))],
sep = "/")
pp_dir <- paste(request_path, "0_2_preProcessed", sep = "/")
dada_ndir <- paste(request_path, "1_1_0_outputFilesDada2", sep = "/")
ma_ndir <- paste(request_path, "2_1_0_MicrobiomeAnalystR", sep = "/")
pi_ndir <- paste(request_path, "3_2_0_PipelineIntermediaries", sep = "/")
## metadata
metadata_filepath <- paste(request_path,
dir(request_path)[grep(pattern = "metadata.txt", x = dir(request_path))],
sep = "/")
## taxa paths
tx_trainset <- paste(wd, "silva_nr_v132_train_set.fa.gz", sep = "/")
tx_assignset <- paste(wd, "silva_species_assignment_v132.fa.gz", sep = "/")
## adapter path
adapter_path_pe <- "/mnt/hd/Marco/Dropbox/Trimmomatic/Trimmomatic-0.39/adapters/Adapter_Nintx_request20230301.fa"
adapter_path_se <- NULL
#############################
## add-ons
#############################
modify_pipe <- NULL
nintx_greens <- RColorBrewer::brewer.pal(n = 9, name = "Greens")[-1]
nintx_grays <- RColorBrewer::brewer.pal(n = 9, name = "Greys")[-1]
#############################
## Pipeline Arguments
#############################
## processing arguments
transform_opt <- "none" # c("none", "rle", "TMM", "clr")
norm_opt <- "rarewo" # c("none", "iterative_rare", "rarewi", "rarewo", "gmpr", "deseq2", "edger", "scuttle_snLSF", "scuttle_snLSF_geom")
scale_opt <- "none" # c("none", "colsum", "upperquartile", "CSS")
VictoriaMesa_adapt = FALSE
## rarefactioncurve1 chunk
metadata_rarecurve1 <- "obs1"
linetype_rarecurve1 <- "id"
## rarefactioncurve2 chunk
metadata_rarecurve2 <- "obs1"
linetype_rarecurve2 <- "id"
## libsize chunk
metadata_libsize <- "id"
## abundanceplot_prep chunk
facet_relabund <- "obs2"
taxa_relabund <- c("Phylum", "Family", "Genus")
## other1 chunk
metadata_toptaxa <- "obs2"
taxa_toptaxa <- c("Phylum", "Family", "Genus")
## alphadiv chunk
metadata_adivers <- "obs1"
taxa_divers <- c("Phylum", "Family", "Genus")
## betadiv chunk
metadata_bdivers <- "obs1"
showlabel_bdivers <- "id"
distName_bdivers <-  c("bray", "unifrac", "wunifrac", "jaccard")
## heatmap1 chunk
metadata_hm <- c("obs1", "obs2")
metadata_hm_1 <- c("obs2")
taxa_hm <- c("Phylum", "Family", "Genus")
order_column <- NULL
order_row_ev <- FALSE
order_row <- NULL
## lda chunk
metadata_lda <- c("obs1")
taxa_lda <- c("Phylum", "Family", "Genus")
contrast_reference_lda <- "Reator1"
lda.threshold <- 1
#############################
# create report - removing adaptors
#############################
## html report SHORT
report_path <- paste("/mnt/hd/Marco/Dropbox/Nintx/MetaNintx_trimadaptors_16S_short_Illv1.Rmd",
sep = "/")
template_path <- paste(report_path, sep = "/")
out_fname <- gsub(pattern = ".Rmd", replacement = "", x = basename(report_path))
out_fname <- paste(request_path, "/", out_fname, ".html", sep = "")
out_dir <- paste(request_path, sep = "/")
rmarkdown::render(input = template_path,
output_format = "html_document",
output_file = out_fname,
output_dir = out_dir)
#############################
# Package Install/Load
#############################
library(RColorBrewer)
#############################
# Paths
#############################
## directories
wd <- "/mnt/hd/Marco/Dropbox/Nintx/"
scripts_dir <- paste(wd, "Scripts/16S_Illumina", sep = "/")
request_path <- paste(wd, "request20230301_9/16S_bacteria_trimadaptors_silva/", sep = "/")
raw_dir <- paste(request_path,
dir(request_path)[grep(pattern = "rawfiles", x = dir(request_path))],
sep = "/")
pp_dir <- paste(request_path, "0_2_preProcessed", sep = "/")
dada_ndir <- paste(request_path, "1_1_0_outputFilesDada2", sep = "/")
ma_ndir <- paste(request_path, "2_1_0_MicrobiomeAnalystR", sep = "/")
pi_ndir <- paste(request_path, "3_2_0_PipelineIntermediaries", sep = "/")
## metadata
metadata_filepath <- paste(request_path,
dir(request_path)[grep(pattern = "metadata.txt", x = dir(request_path))],
sep = "/")
## taxa paths
tx_trainset <- paste(wd, "silva_nr_v132_train_set.fa.gz", sep = "/")
tx_assignset <- paste(wd, "silva_species_assignment_v132.fa.gz", sep = "/")
## adapter path
adapter_path_pe <- "/mnt/hd/Marco/Dropbox/Trimmomatic/Trimmomatic-0.39/adapters/Adapter_Nintx_request20230301.fa"
adapter_path_se <- NULL
#############################
## add-ons
#############################
modify_pipe <- NULL
nintx_greens <- RColorBrewer::brewer.pal(n = 9, name = "Greens")[-1]
nintx_grays <- RColorBrewer::brewer.pal(n = 9, name = "Greys")[-1]
#############################
## Pipeline Arguments
#############################
## processing arguments
transform_opt <- "none" # c("none", "rle", "TMM", "clr")
norm_opt <- "rarewo" # c("none", "iterative_rare", "rarewi", "rarewo", "gmpr", "deseq2", "edger", "scuttle_snLSF", "scuttle_snLSF_geom")
scale_opt <- "none" # c("none", "colsum", "upperquartile", "CSS")
VictoriaMesa_adapt = FALSE
## rarefactioncurve1 chunk
metadata_rarecurve1 <- "obs1"
linetype_rarecurve1 <- "id"
## rarefactioncurve2 chunk
metadata_rarecurve2 <- "obs1"
linetype_rarecurve2 <- "id"
## libsize chunk
metadata_libsize <- "id"
## abundanceplot_prep chunk
facet_relabund <- "obs2"
taxa_relabund <- c("Phylum", "Family", "Genus")
## other1 chunk
metadata_toptaxa <- "obs2"
taxa_toptaxa <- c("Phylum", "Family", "Genus")
## alphadiv chunk
metadata_adivers <- "obs1"
taxa_divers <- c("Phylum", "Family", "Genus")
## betadiv chunk
metadata_bdivers <- "obs1"
showlabel_bdivers <- "id"
distName_bdivers <-  c("bray", "unifrac", "wunifrac", "jaccard")
## heatmap1 chunk
metadata_hm <- c("obs1", "obs2")
metadata_hm_1 <- c("obs2")
taxa_hm <- c("Phylum", "Family", "Genus")
order_column <- NULL
order_row_ev <- FALSE
order_row <- NULL
## lda chunk
metadata_lda <- c("obs1")
taxa_lda <- c("Phylum", "Family", "Genus")
contrast_reference_lda <- "Reator1"
lda.threshold <- 1
#############################
# create report - removing adaptors
#############################
## html report SHORT
report_path <- paste("/mnt/hd/Marco/Dropbox/Nintx/MetaNintx_trimadaptors_16S_short_Illv1.Rmd",
sep = "/")
template_path <- paste(report_path, sep = "/")
out_fname <- gsub(pattern = ".Rmd", replacement = "", x = basename(report_path))
out_fname <- paste(request_path, "/", out_fname, ".html", sep = "")
out_dir <- paste(request_path, sep = "/")
rmarkdown::render(input = template_path,
output_format = "html_document",
output_file = out_fname,
output_dir = out_dir)
## html report FULL
report_path <- paste("/mnt/hd/Marco/Dropbox/Nintx/MetaNintx_trimadaptors_16S_full_Illv1.Rmd",
sep = "/")
template_path <- paste(report_path, sep = "/")
out_fname <- gsub(pattern = ".Rmd", replacement = "", x = basename(report_path))
out_fname <- paste(request_path, "/", out_fname, ".html", sep = "")
out_dir <- paste(request_path, sep = "/")
rmarkdown::render(input = template_path,
output_format = "html_document",
output_file = out_fname,
output_dir = out_dir)
deseq <- read.delim("/mnt/hd/Marco/Dropbox/LaviniaPerquim/GSE158995/CIRI_DE/circ_mutation-control_DEG.txt")
View(deseq)
edger <- read.delim("/mnt/hd/Marco/Dropbox/LaviniaPerquim/GSE158995/CIRI_DE/circRNA_de.txt")
View(edger)
top50_deseq <- deseq[1:50,]
top50_edger <p edger[1:50,]
top50_edger <- edger[1:50,]
View(top50_deseq)
View(top50_edger)
View(top50_deseq)
top50g_deseq <- top50_deseq$gene_name
top50g_edger <- top50_edger$gene_name
top50g_deseq <- strsplit(x = top50g_deseq, split = ",")
top50g_deseq
unlist(top50g_deseq)
top50g_deseq <- unlist(top50g_deseq)
top50g_edger <- strsplit(x = top50g_edger, split = ",")
top50g_edger <- unlist(top50g_edger)
instersect(top50g_edger, top50g_deseq)
intersect(top50g_edger, top50g_deseq)
View(top50_deseq)
View(deseq)
View(edger)
View(deseq)
View(edger)
View(deseq)
View(deseq)
2/3
setwd("/mnt/hd2/Carello-Collar_GABAergicMeta-analysis")
res_folders <- dir()
res_folders <- res_folders[grep(pattern = "results", x = res_folders)]
res_folders <- res_folders[-length(res_folders)]
original_folder <- getwd()
res_folders
for(d in res_folders) {
setwd(d)
code_file <- dir()
code_file <- code_file[grep(pattern = "_code.R", x = code_file)]
source(file = code_file)
setwd(original_folder)
}
